#pp_bless ('PDL::ReduceByRuns');

our $VERSION = '0.01';

pp_addpm({At=>'Top'}, <<'EOD');
 
use PDL::LiteF;
use Carp;
 
$PDL::onlinedoc->scan(__FILE__) if $PDL::onlinedoc;
 
=head1 NAME
 
PDL::ReduceByRuns -- Reduce values in one ndarray given runs of values in another

=head1 DESCRIPTION
 
PDL extension to calculate reductions on an ndarray given contiguous sequences
(runs) of the same value in another ndarray.

=head1 SYNOPSIS
 
    use PDL::LiteF;
    use PDL::ReduceByRuns;

    my $values = sequence (10) + 1;
    my $runner = PDL->pdl ([1,1,1,2,2,2,3,3,3,3]);
    my ($runs, $reduced) = sum_by_runs ($runner, $agger);
    #  $runs    is [1,2,3]
    #  $reduced is [6,15,34]
    ($runs, $reduced) = max_by_runs ($runner, $agger);
    #  $runs    is [1,2,3]
    #  $reduced is [3,6,10]
    
=head1 Some more details

All input ndarrays are flattened for processing.  The returned values are also flat.

Output ndarrays retain the type of their inputs.

Be warned that these functions do not check for numeric overflow so if the input values
of the reducer ndarray to the sum or product calculations exceed the numeric limits
of your type then odd things may happen.  If that is a risk then you could promote
the type before input (maybe this should be an option).

All subs return two ndarrays.  The first is the values of the runs,
the second is the reduced values.

In scalar context they return an array ref containing the two ndarrays.

The original motivation was to aggregate runs of values to simplify the percentile
calculations in L<Statistics::Descriptive::PDL::SampleWeighted>.  Basically it needed to
calculate the sum of the weights for each unique input value for a sorted ndarray.
In this module the process has been generalised to other reduction functions,
some of which might be useful and others are more for completeness.

=cut
 
EOD
;

#  min is also used for max - should rename that var
my $min_code = <<'END_EXTREMUM_CODE'
    PDL_Indx j = 0;
    double extremum = $a(n=>0);
    $GENERIC(b) bval, last_bval;
    last_bval = $b(n=>0);
    $t(m=>0) = 0;
    loop (n) %{
      bval = $b();
      if (last_bval != bval) {
        $t(m=>j) = extremum;
        $u(m=>j) = last_bval;
        extremum = $a();
        j++;
        last_bval = bval;
      }
      HANDLEBADCODEHERE
    %}
    $t(m=>j) = extremum;
    $u(m=>j) = last_bval;
    $s() = j+1;  // number of vals    

END_EXTREMUM_CODE
  ;
my $min_code_bad = $min_code;
my $max_code     = $min_code;
my $max_code_bad = $max_code;

my $min_code_action = '
  if ($a() < extremum) {
    extremum = $a();
  }
';
my $min_code_bad_action = '
  if ($ISBADVAR(extremum,a) || ($ISGOOD(a()) && $a() < extremum)) {
    extremum = $a();
  }
';
$min_code     =~ s/HANDLEBADCODEHERE/$min_code_action/;
$min_code_bad =~ s/HANDLEBADCODEHERE/$min_code_bad_action/;

my $max_code_action = '
  if ($a() > extremum) {
    extremum = $a();
  }
';
my $max_code_bad_action = '
  if ($ISBADVAR(extremum,a) || ($ISGOOD(a()) && $a() > extremum)) {
    extremum = $a();
  }
';
$max_code     =~ s/HANDLEBADCODEHERE/$max_code_action/;
$max_code_bad =~ s/HANDLEBADCODEHERE/$max_code_bad_action/;


my $sum_code = <<'END_SUM_CODE'
    PDL_Indx j = 0;
    double sum = 0;
    $GENERIC(b) bval, last_bval;
    last_bval = $b(n=>0);
    $t(m=>0) = 0;
    loop (n) %{
      bval = $b();
      if (last_bval != bval) {
        $t(m=>j) = sum;
        $u(m=>j) = last_bval;
        sum = 0;
        j++;
        last_bval = bval;
      }
      HANDLEBADCODEHERE
    %}
    $t(m=>j) = sum;
    $u(m=>j) = last_bval;
    $s() = j+1;  // number of vals    

END_SUM_CODE
  ;
my $sum_code_bad  = $sum_code;
my $prod_code     = $sum_code;

my $sum_code_action = 'sum += $a();';
my $sum_code_bad_action = '
if ($ISGOOD(a())) {
  sum += $a();
}
';
$sum_code     =~ s/HANDLEBADCODEHERE/$sum_code_action/;
$sum_code_bad =~ s/HANDLEBADCODEHERE/$sum_code_bad_action/;

#  fix starting val
$prod_code =~ s/sum = 0/sum = 1/g;
my $prod_code_bad = $prod_code;
my $prod_code_action = 'sum *= $a();';
my $prod_code_bad_action = '
if ($ISGOOD(a())) {
  sum *= $a();
}
';
$prod_code     =~ s/HANDLEBADCODEHERE/$prod_code_action/;
$prod_code_bad =~ s/HANDLEBADCODEHERE/$prod_code_bad_action/;


# flattens any inputs before running the calculations
#  perl inputs are reversed wrt pdl call
pp_def('sum_by_runs',
  Pars      => 'b(n); a(n); [o]t(m); [o]u(m); indx s();',
  PMCode    => <<'EOC',
sub PDL::sum_by_runs {
  my ($runner, $agger) = @_;
  #  will not handle overflow
  my $t = $agger->zeroes ($agger->type,  $agger->nelem);
  my $u = $runner->zeroes($runner->type, $runner->nelem);
  #  this stores in its first value the highest index into $t
  my $sizer = pdl(PDL::indx, [0]);
  &PDL::_sum_by_runs_int($runner->flat,$agger->flat,$t,$u,$sizer);
  $sizer = $sizer->at(0);
  $t->reshape($sizer)->sever;  #  get rid of excess vals
  $u->reshape($sizer)->sever;
  return wantarray ? ($u, $t) : [$u, $t];
}
EOC
  HandleBad => 1,
  Code      => $sum_code,
  BadCode   => $sum_code_bad,
  Doc       => '
 
=for ref
 
Sum values in second ndarray given runs of
the same value in the first ndarray.
 
=cut
  ',
 
);

# flattens any inputs before running the calculations
#  perl inputs are reversed wrt pdl call
pp_def('product_by_runs',
  Pars      => 'b(n); a(n); [o]t(m); [o]u(m); indx s();',
  PMCode    => <<'EOC',
sub PDL::product_by_runs {
  my ($runner, $agger) = @_;
  #  will not handle overflow
  my $t = $agger->zeroes ($agger->type,  $agger->nelem);
  my $u = $runner->zeroes($runner->type, $runner->nelem);
  #  this stores in its first value the highest index into $t
  my $sizer = pdl(PDL::indx, [0]);
  &PDL::_product_by_runs_int($runner->flat,$agger->flat,$t,$u,$sizer);
  $sizer = $sizer->at(0);
  $t->reshape($sizer)->sever;  #  get rid of excess vals
  $u->reshape($sizer)->sever;
  return wantarray ? ($u, $t) : [$u, $t];
}
EOC
  HandleBad => 1,
  Code      => $prod_code,
  BadCode   => $prod_code_bad,
  Doc       => '
 
=for ref
 
Calculate the product of values in second ndarray given runs of
the same value in the first ndarray.
 
=cut
  ',
 
);

# flattens any inputs before running the calculations
#  perl inputs are reversed wrt pdl call
pp_def('min_by_runs',
  Pars      => 'b(n); a(n); [o]t(m); [o]u(m); indx s();',
  PMCode    => <<'EOC',
sub PDL::min_by_runs {
  my ($runner, $agger) = @_;
  my $t = $agger->zeroes ($agger->type,  $agger->nelem);
  my $u = $runner->zeroes($runner->type, $runner->nelem);
  #  this stores in its first value the highest index into $t
  my $sizer = pdl(PDL::indx, [0]);
  &PDL::_min_by_runs_int($runner->flat,$agger->flat,$t,$u,$sizer);
  $sizer = $sizer->at(0);
  $t->reshape($sizer)->sever;  #  get rid of any excess vals
  $u->reshape($sizer)->sever;
  return wantarray ? ($u, $t) : [$u, $t];
}
EOC
  HandleBad => 1,
  Code      => $min_code,
  BadCode   => $min_code_bad,
  Doc       => '
 
=for ref
 
Calculate the minimum values in second ndarray given runs of
the same value in the first ndarray.

=cut
  ',
 
);

# flattens any inputs before running the calculations
#  perl inputs are reversed wrt pdl call
pp_def('max_by_runs',
  Pars      => 'b(n); a(n); [o]t(m); [o]u(m); indx s();',
  PMCode    => <<'EOC',
sub PDL::max_by_runs {
  my ($runner, $agger) = @_;
  my $t = $agger->zeroes ($agger->type(),  $agger->nelem);
  my $u = $runner->zeroes($runner->type(), $runner->nelem);
  #  this stores in its first value the highest index into $t
  my $sizer = pdl(PDL::indx, [0]);
  &PDL::_max_by_runs_int($runner->flat,$agger->flat,$t,$u,$sizer);
  $sizer = $sizer->at(0);
  $t->reshape($sizer)->sever;  #  get rid of excess vals
  $u->reshape($sizer)->sever;
  return wantarray ? ($u, $t) : [$u, $t];
}
EOC
  HandleBad => 1,
  Code      => $max_code,
  BadCode   => $max_code_bad,
  Doc       => '
 
=for ref
 
Calculate the maximum values in second ndarray given runs of
the same value in the first ndarray.

=cut
  ',
 
);

pp_done();
