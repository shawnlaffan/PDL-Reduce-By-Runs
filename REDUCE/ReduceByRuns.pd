#pp_bless ('PDL::ReduceByRuns');

our $VERSION = '0.01';

pp_addpm({At=>'Top'}, <<'EOD');
 
use PDL::LiteF;
use PDL::NiceSlice;
use Carp;
 
$PDL::onlinedoc->scan(__FILE__) if $PDL::onlinedoc;
 
=head1 NAME
 
PDL::Gobble::Gobble::Gobble -- experiment
 
=head1 DESCRIPTION
 
stuff
 
=head1 SYNOPSIS
 
    use PDL::LiteF;
    use PDL::NiceSlice;
    use PDL::Gobble::Gobble::Gobble;
 
 
=cut
 
EOD
;


# flattens any inputs before running the calculations
#  perl inputs are reversed wrt pdl call
pp_def('sum_by_runs',
  Pars      => 'a(n); b(n); [o]t(m); [o]u(m); indx s();',
  PMCode    => <<'EOC',
sub PDL::sum_by_runs {
  my ($runner, $agger) = @_;
  #  will not handle overflow
  my $t = $agger->zeroes ($agger->type(), $agger->nelem);
  my $u = $t->copy;
  #  this stores in its first value the highest index into $t
  my $sizer = pdl(PDL::indx, [0]);
  &PDL::_sum_by_runs_int($agger->flat,$runner->flat,$t,$u,$sizer);
  #say STDERR "S IS: " . $sizer;
  #say STDERR "T IS $t";
  $sizer = $sizer->at(0);
  #say STDERR "S IS: " . $sizer;
  $t->reshape($sizer)->sever;  #  get rid of excess vals
  $u->reshape($sizer)->sever;
  return wantarray ? ($u, $t) : [$u, $t];
}
EOC
  HandleBad => 0,  #  fix later
  Code      => '
    PDL_Indx j = 0;
    double sum = 0;
    $GENERIC(b) bval, last_bval;
    last_bval = $b(n=>0);
    $t(m=>0) = 0;
    loop (n) %{
      bval = $b();
      if (last_bval != bval) {
        $t(m=>j) = sum;
        $u(m=>j) = last_bval;
        sum = 0;
        j++;
        last_bval = bval;
      }
      sum += $a();
    %}
    $t(m=>j) = sum;
    $u(m=>j) = last_bval;
    $s() = j+1;  // number of vals
  ',
  Doc      => '
 
=for ref
 
Sum values in first ndarray given contiguous sequences of
the same value in the second ndarray.
 
=cut
  ',
 
);

#pp_export_nothing();

pp_done();
